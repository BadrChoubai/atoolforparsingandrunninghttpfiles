# This is a file that should include a GITHUB_TOKEN variable for ensuring goreleaser
# can successfully publish packages to the repo
include .env.release
BIN ?= cli
DIST ?= bin

VERSION ?= $(shell git describe --tags --always --dirty)
# Used internally.  Users should pass GOOS and/or GOARCH.
OS := $(if $(GOOS),$(GOOS),$(shell GOTOOLCHAIN=local go env GOOS))
ARCH := $(if $(GOARCH),$(GOARCH),$(shell GOTOOLCHAIN=local go env GOARCH))
LDFLAGS := -s -w -X 'main.version=$(VERSION)'

all: build

build: # @HELP build application locally
	@echo "building application"
	@printf "application:\t$(BIN)\n"
	@printf	"version:\t$(VERSION)\n"
	GO111MODULE=on CGO_ENABLED=0 go build \
		-ldflags="$(LDFLAGS)" \
		-o $(DIST)/$(BIN) ./cmd/$(BIN)

clean: # @HELP cleans build artifacts
	rm -rf $(DIST)
	# dist generated by goreleaser
	rm -rf dist


TAG := $(VERSION)__$(OS)_$(ARCH)
release: # @HELP creates new release for TAG
	@echo "release $(TAG)"
	GITHUB_TOKEN=$(GITHUB_TOKEN) VERSION=$(VERSION) \
		goreleaser release

snapshot: # @HELP do dry run of goreleaser
	@echo "release snapshot $(TAG)"
	GITHUB_TOKEN="$(GITHUB_TOKEN)" VERSION=$(VERSION) \
		goreleaser release --snapshot --clean

test:
	go test ./...

version: # @HELP outputs the version string
	@echo $(VERSION)

help:
	@printf "\nTARGETS\n"
	@grep -hE '^.*: *# *@HELP' $(MAKEFILE_LIST) \
		| awk '									\
		BEGIN {FS = ": *# *@HELP"};				\
		{ printf "	%-30s %s\n", $$1, $$2 };	\
		'

SHELL := /usr/bin/env bash -o errexit -o pipefail -o nounset
.DEFAULT_GOAL = all
.PHONY: all build clean help release snapshot test version

