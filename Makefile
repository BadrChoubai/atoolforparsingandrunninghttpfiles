# This is a file that should include a GITHUB_TOKEN variable for ensuring goreleaser
# can successfully publish packages to the repo
include .env.release
BIN ?= cli
DIST ?= bin

# VERSION: Application version
VERSION ?= $(shell git describe --tags --always --dirty)

# Used internally.  Users should pass GOOS and/or GOARCH.
# ARCH: Target architecture
ARCH := $(if $(GOARCH),$(GOARCH),$(shell GOTOOLCHAIN=local go env GOARCH))
# LDFLAGS: ldflags used by `go build` command
LDFLAGS := -s -w -X 'main.Version=$(VERSION)'
# OS: Target operating system
OS := $(if $(GOOS),$(GOOS),$(shell GOTOOLCHAIN=local go env GOOS))

all: build

build: # @HELP build application locally
build: help-build
	GO111MODULE=on CGO_ENABLED=0 go build \
		-ldflags="$(LDFLAGS)" \
		-o $(DIST)/$(BIN) ./cmd/$(BIN)

clean: # @HELP cleans build artifacts
	rm -rf $(DIST)
	# dist generated by goreleaser
	rm -rf dist

lint: # @HELP run linters
	sh ./build/scripts/lint.sh

TAG := $(VERSION)__$(OS)_$(ARCH)
release: # @HELP creates new release for TAG
	GITHUB_TOKEN=$(GITHUB_TOKEN) VERSION=$(VERSION) \
		goreleaser release

snapshot: # @HELP do dry run of goreleaser
	GITHUB_TOKEN="$(GITHUB_TOKEN)" VERSION=$(VERSION) \
		goreleaser release --snapshot --clean

test:
	go test ./...

version: # @HELP outputs the version string
	@printf $(VERSION)

help:
	@grep -hE '^.*: *# *@HELP' $(MAKEFILE_LIST) \
		| awk '									\
		BEGIN {FS = ": *# *@HELP"};				\
		{ printf "	%-30s %s\n", $$1, $$2 }; '

help-build:
	@grep -hE '^# *[A-Z_]+: ' $(MAKEFILE_LIST) \
	  | sed -E 's/^# *([A-Z_]+): (.*)/ \t\1: \2/'

SHELL := /usr/bin/env bash -o errexit -o pipefail -o nounset
.DEFAULT_GOAL = all
.PHONY: all build clean help release snapshot test version

